
ゲームの概要
　２次元のカートゲームのタイムトライアル（１台の車でタイムを競う）です。

遊び方
　画面を開いて数秒待つと自動的にカウントダウンがはじまるので、それが０になったらゲーム開始です
　壁にぶつからないように道に沿って３周しましょう。基本的に何もしなくても直進します。LボタンやRボタンで左右に曲がる、backでバック、キノコボタンで加速（速度が２倍に上昇）できます。これらのボタンは全て押し続けている間にだけ効果を発揮します。
　壁にぶつかってしまうと車が止まってしまいロスタイムになります。ぶつかったらバックで少し後方に戻り、すぐにL、Rボタンを押して軌道を修正してください。３周のタイムが早ければ早いほど上手だということになります。
　自分が遊んだときは60～90秒ほどで１周できました。３周し終わると最終タイムも表示されるので、ぜひ３周してみて下さい。

コツ　
　いかに壁にぶつからずにかつ、加速ボタンを押す時間を長くできるかがポイントです。

クラスの構成
　ゲームを制御するKartGameクラス、車のKartクラス、レースコースとレースタイムを管理するRacewayクラス、キノコの絵を描くだけのMushroomクラスの４つのクラスから構成されています。

 KartGameクラス
 　ゲームスタートのカウントダウン、KartやRaceway、操作ボタン、ストップウォッチの管理などゲームを制御するクラスです。画面を開いて５秒後に３、２、１、というカウントダウンが始まります。
　画面を開いた時の時間をopeningTimeとして、それ以降の時間をcurrentTimeとして記憶させ、その差をとりました。カウントダウンが終わると画面に車とレースのコースを作成し、４つの操作ボタンも作成して加速ボタンにMushroomクラスを利用してキノコの絵柄をつけます。そして、
 カウントダウンのテキストを取り除きます。これでpublic void begin内の役目はすべて終了です。その後はボタンが押されたり、離されたりしたときにKartクラスのメソッドを実行して車を制御するだけです。
 
 
 Kartクラス
 　呼び出されるとまずは車を表す長方形を描くためにleft,right,lower,upperの４本の辺を作ります。車の長方形の左下の点がlowerとleftの始点、長方形の右上の点がupperとrightの始点となっています。
 以下はboolean playingがtrueの間のみ（3lap走り終わるまでtrue）実行されるようになっています
 boolean movingForward,movingBackward,turningLeft,turningRight,acceleratingはそれぞれ現在車が前進、後退、左折、右折、加速しているかを把握するインスタンス変数となっています。
 これらの真偽に応じて、double step（車が１コマ進む距離）、double direction（車のlowerの水平方向からの傾き）、double add（次のコマで車が回転する角度）を変更して車（を表す長方形の辺）を動かします。
 ～車の移動の方法～
　 ①車が後ろに進んでいる(movingBackward = true)かをチェック
 　　　もしそうならstep = -1.0, add = 0;
 
　 ②①でないとき、車が前に進んでいる（movingForward = true)かをチェック（※壁にぶつかるなどして前にも後ろにも進んでいない場合もあるので①と②を１つのbooleanで管理することはできません）
 　　　もしそうなら、次に加速しているかをチェック加速しているならばstep = 4.0, していないならばstep = 2.0　
　また、左折または右折しているかをチェック。左折または右折しているならば適切なaddの値が代入される。左折も右折もしていないならばadd = 0
  
　 ③①でも②でもないとき（車が止まっているとき）
 　　step = 0, add = 0;
 
 　　①～③の判定が終わったら４本の辺の始点と終点を移動させることにより長方形の形を保ったまま車全体を移動させます。この座標計算において現在の車の座標、傾きdirection、先ほど新たに決めたstepと追加の傾きaddがその役割を果たします。最後に現在の傾きを更新するためにdirection = direction + add として終了です。
 
 Kartクラスのメソッド
 　以下は主にKartGameクラスの４つの操作ボタンが押されたとき、離されたときに呼び出されるメソッドです
 　playingSwitch　　　　　　　遊んでいる最中かを把握するplayingの真偽を入れ替えるメソッドです
 　turnLeft,turnRight 　　L、Rボタンが押されている間のみturningLeft,turningRightをtrueとして左折、右折を行うメソッドです
 　stopTurning 　　　　　　　　L,Rボタンが離されたときに左折、右折をやめるメソッドです
 　moveForward 　　　　　　　　壁にぶつかっておらずバックボタンが押されていない時は基本的に常にtrueとなっているメソッドです
  moveBackward　　　　　　　　バックボタンが押されている間のみtrueとなり、バックを行うメソッドです。もちろんmoveForwardとmoveBackwardが同時にtrueになることはありません
  accelerate 　　　　　　　　　加速ボタンが押されている間のみacceleratingをtrueとして加速を行うメソッドです
  stopAccelerate 　　　　　加速ボタンが離されたときに加速をやめるメソッドです
  stopMoving 　　　　　　　　 壁にぶつかった時などにmovingForward,movingBackwardをともにfalseにして車の動きを止めるメソッドです。playingSwitchはゲームそのものを止めるのに対し、こちらは（ゲームは続いているが）車の動きを止めるメソッドとなっています
  whetherMovingForward, whetherMovingBackward 　 movingForward,movingBackwardの真偽値を返すメソッドです。Racewayクラスが壁との衝突判定をする際に使います。
  getA,getB,getC,getD   それぞれ車の左上、左下、右下、右上の座標を返すメソッドです。Racewayクラスで壁との衝突判定をする際に使います。  
  
  
 Racewayクラス
 　　カウントダウン終了後にレースがスタートするとメインのKartGameクラスでRacewayが作られ、boolen timingがtrueである間のみアクティブオブジェクトとしての役割を果たします
 　①レースコース部分について
 　　　外枠のracewayFrameと15個のFilledRect[] wallのパーツから構成されています。
 　　瞬間ごとに車が壁にぶつかっていないかを判定します
 　　～判定の方法～
 　　　①車が前に進んでいるとき　　車の左上、右上が壁に衝突していたら車の動きを止める、していなかったら何もしない
 　　　②車が後ろに進んでいるとき　車の左下、右下　〃
　　 衝突をしているかの判定は、レースコースの各パーツが車の頂点を含んでいるかを確かめる自分自身のメソッドboolean containsを用いました。
 　　ここでのポイント　車が後ろに進んでいるときに左上、右上も衝突判定をすると、左上あるいは右上が壁にぶつかっているためにバックをしようとしても衝突判定によってできないという事態が起こります。（つまり、壁にぶつかっているから逆方向にバックをしたいのにのに衝突をしているのでバックもできないというジレンマに陥ります。バックをしているときに後輪がぶつかって前進できない場合も同様です）そこで前進しているときには前輪だけを、後進しているときには後輪だけを衝突判定しても特に支障はなくうまくいくという考えに基づいてこの方法をとりました。
 
 　②チェックポイント、lapカウント
 　　　レースコース上の車が絶対に通過する３か所に見えない正方形を設置してcheckPoint0,1,2としました。そしてその３か所を何回通過したかをカウントするpoint0,1,2Countも用意しました。Point0を通過した時、point0Countとpoint2Countの値が同じだった場合にのpoint0Countの値を１増やすというようにしてあります。同様に他のチェックポイントについても決められた順番でレースコースを通らない限りpoint Countが増えないためスタートラインの前後を３回行き来するだけして3lap終了といった不正をできなくなっています。そして、１周ごとに（checkPoint0を完全に通過しきるごとに）ラップタイムが表示され、３周すると合計タイムも表示して、timing=falseとしてかつkart.playingSwitch()を実行することにより、ゲームが終了します。
 
 
　Mushroomクラス
　　引数としてFramedRectとサイズを整数値として渡すことで、そのFramedRectの中にキノコの絵を描くというだけのクラスです



難しかった点、工夫した点
　車を長方形の形を保ったまま直進、直進しながら曲がる、バックをさせるように４本の線分の座標を動かすのが難しかった。手計算で回転計算を行った。
　スタートラインの前後を行き来するだけで３周するという不正を防ぐためにチェックポイントを３か所設けて全て通過しないと１周したと判定されないようにした。（詳細はRacewayクラス）
　一回壁に衝突してしまうと、前に進むこともバックをすることもできず全く動けなくなるという現象が起こるのを防ぐために一工夫した。（詳細はRacewayクラス）



観測された不具合や補足
　　直進やバックをしているときに壁にぶつかったかを判定するのは長方形の頂点だけなので、たまに壁にめり込むことがあります。
　　親に遊んでもらったところ、ゲームは得意でないということもあってか操作が難しいという苦情が寄せられましたが、たぶんそんなことはないと思っています。Kartクラスのrunの部分にあるif(movingBackward){ }とelse{ } の中にあるadd = 0;を消去すると、車が左折、右折してる間は壁との衝突判定をしなくなったりするため遊びやすくなります。しかし、判定が緩くなるので壁にめり込むといったこともよく発生するようにはなります。
